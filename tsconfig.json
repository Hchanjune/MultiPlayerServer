{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* 증분 컴파일을 허용하기 위해 .tsbuildinfo 파일을 저장합니다. - Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* 프로젝트 참조와 함께 사용되도록 TypeScript 프로젝트의 제약 조건을 활성화합니다. - Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 증분 컴파일 파일인 .tsbuildinfo의 경로를 지정합니다. - Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 복합 프로젝트를 참조할 때 선언 파일 대신 소스 파일을 선호하는 것을 비활성화합니다. - Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* 편집 시 여러 프로젝트 참조 검사를 비활성화합니다. - Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* TypeScript가 자동으로 로드하는 프로젝트 수를 줄입니다. - Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES6",                                  /* 출력된 JavaScript의 언어 버전을 설정하고 호환되는 라이브러리 선언을 포함합니다. - Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* 대상 런타임 환경을 설명하는 번들 라이브러리 선언 파일을 지정합니다. - Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* 생성된 JSX 코드를 지정합니다. - Specify what JSX code is generated. */
    "experimentalDecorators": true,                      /* 레거시 실험적 데코레이터에 대한 실험적 지원을 활성화합니다. - Enable experimental support for legacy experimental decorators. */
    "emitDecoratorMetadata": true,                    /* 소스 파일의 데코레이터가 있는 선언에 대한 디자인 타입 메타데이터를 출력합니다. - Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* React JSX 출력을 대상으로 할 때 사용하는 JSX 팩토리 함수를 지정합니다. 예: 'React.createElement' 또는 'h' - Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* React JSX 출력을 대상으로 할 때 조각에 사용되는 JSX 프래그먼트 참조를 지정합니다. 예: 'React.Fragment' 또는 'Fragment' - Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                  /* 'jsx: react-jsx*'를 사용할 때 JSX 팩토리 함수를 가져오는 데 사용되는 모듈 지정자를 지정합니다. - Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* 'createElement'에 대해 호출되는 객체를 지정합니다. 이는 'react' JSX 출력을 대상으로 할 때만 적용됩니다. - Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* 기본 lib.d.ts를 포함하여 모든 라이브러리 파일의 포함을 비활성화합니다. - Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* ECMAScript 표준을 준수하는 클래스 필드를 출력합니다. - Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* 모듈 형식 JS 파일을 감지하는 데 사용되는 방법을 제어합니다. - Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* 생성되는 모듈 코드를 지정합니다. - Specify what module code is generated. */
    // "rootDir": "./",                                  /* 소스 파일 내의 루트 폴더를 지정합니다. - Specify the root folder within your source files. */
    "moduleResolution": "node",                     /* TypeScript가 주어진 모듈 지정자로부터 파일을 찾는 방법을 지정합니다. - Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* 상대적이지 않은 모듈 이름을 해결하기 위한 기본 디렉토리를 지정합니다. - Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* 가져오기를 추가 조회 위치로 다시 매핑하는 항목 집합을 지정합니다. - Specify a set of entries that re-map imports to additional lookup locations. */
    "rootDirs": ["./src"],                               /* 모듈을 해결할 때 여러 폴더를 하나로 취급할 수 있도록 합니다. - Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* './node_modules/@types'처럼 작동하는 여러 폴더를 지정합니다. - Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* 소스 파일에서 참조되지 않고 포함될 타입 패키지 이름을 지정합니다. - Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* 모듈에서 UMD 글로벌에 액세스할 수 있도록 허용합니다. - Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* 모듈을 해결할 때 검색할 파일 이름 접미사의 목록입니다. - List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* 가져오기에 TypeScript 파일 확장자를 포함할 수 있도록 허용합니다. '--moduleResolution bundler' 및 '--noEmit' 또는 '--emitDeclarationOnly' 설정이 필요합니다. - Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* 패키지 가져오기를 해결할 때 package.json 'exports' 필드를 사용합니다. - Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* 가져오기를 해결할 때 package.json 'imports' 필드를 사용합니다. - Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* 가져오기를 해결할 때 해석기별 기본값에 추가할 조건을 설정합니다. - Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    "resolveJsonModule": true,                        /* .json 파일 가져오기를 활성화합니다. - Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* 선언 파일이 있는 경우 모든 확장자를 가진 파일을 가져올 수 있도록 허용합니다. - Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* 'import', 'require' 또는 '<reference>'가 TypeScript가 프로젝트에 추가해야 하는 파일 수를 확장하지 않도록 합니다. - Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    "allowJs": true,                                  /* JavaScript 파일이 프로그램의 일부가 될 수 있도록 허용합니다. 'checkJS' 옵션을 사용하여 이러한 파일에서 오류를 가져옵니다. - Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* 타입 검사가 된 JavaScript 파일에서 오류 보고를 활성화합니다. - Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules'에서 JavaScript 파일을 검사하는 데 사용되는 최대 폴더 깊이를 지정합니다. 'allowJs'에만 적용됩니다. - Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    "declaration": true,                              /* 프로젝트의 TypeScript 및 JavaScript 파일에서 .d.ts 파일을 생성합니다. - Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* .d.ts 파일에 대한 소스 맵을 생성합니다. - Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* .d.ts 파일만 출력하고 JavaScript 파일은 출력하지 않습니다. - Only output d.ts files and not JavaScript files. */
    "sourceMap": true,                                /* 출력된 JavaScript 파일에 대한 소스 맵 파일을 생성합니다. - Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* 출력된 JavaScript 내부에 소스 맵 파일을 포함합니다. - Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* 모든 출력을 하나의 JavaScript 파일로 번들링하는 파일을 지정합니다. 'declaration'이 true이면 모든 .d.ts 출력을 번들링하는 파일도 지정합니다. - Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",                                   /* 모든 출력 파일에 대한 출력 폴더를 지정합니다. - Specify an output folder for all emitted files. */
    "removeComments": true,                           /* 주석 출력을 비활성화합니다. - Disable emitting comments. */
    // "noEmit": true,                                   /* 컴파일에서 파일 출력을 비활성화합니다. - Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* 파일당 포함하는 대신 프로젝트당 한 번씩 tslib에서 헬퍼 함수를 가져올 수 있도록 허용합니다. - Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* 더 적합하지만, 장황하고 성능이 낮은 반복을 위한 JavaScript를 출력합니다. - Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* 디버거가 참조 소스 코드를 찾는 데 사용하는 루트 경로를 지정합니다. - Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* 디버거가 생성된 위치 대신 맵 파일을 찾아야 하는 위치를 지정합니다. - Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* 출력된 JavaScript 내부의 소스 맵에 소스 코드를 포함합니다. - Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* 출력 파일의 시작 부분에 UTF-8 바이트 순서 표시(BOM)를 출력합니다. - Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* 파일을 출력하기 위한 줄 바꿈 문자를 설정합니다. - Set the newline character for emitting files. */
    // "stripInternal": true,                            /* JSDoc 주석에 '@internal'이 있는 선언 출력을 비활성화합니다. - Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* 컴파일된 출력에서 '__extends'와 같은 사용자 정의 헬퍼 함수 생성을 비활성화합니다. - Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* 타입 검사 오류가 보고되면 파일 출력을 비활성화합니다. - Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* 생성된 코드에서 'const enum' 선언을 지우는 것을 비활성화합니다. - Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* 생성된 선언 파일의 출력 디렉토리를 지정합니다. - Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 다른 가져오기에 의존하지 않고 각 파일을 안전하게 트랜스파일할 수 있도록 합니다. - Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* 타입 전용으로 표시되지 않은 가져오기 또는 내보내기를 변환하거나 생략하지 않으며, 'module' 설정에 따라 출력 파일 형식으로 작성되도록 보장합니다. - Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* 다른 도구가 선언 파일을 쉽게 생성할 수 있도록 내보내기에 충분한 주석을 요구합니다. - Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "allowSyntheticDefaultImports": true,             /* 모듈에 기본 내보내기가 없는 경우 'import x from y'를 허용합니다. - Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* CommonJS 모듈 가져오기를 지원하기 위해 추가 JavaScript를 출력합니다. 이는 타입 호환성을 위해 'allowSyntheticDefaultImports'를 활성화합니다. - Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* 심볼릭 링크를 실제 경로로 해석하는 것을 비활성화합니다. 이는 노드의 동일한 플래그와 관련이 있습니다. - Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* 가져오기에 대소문자가 일관되게 올바른지 확인합니다. - Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* 모든 엄격한 타입 검사 옵션을 활성화합니다. - Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* 암시적 'any' 타입이 있는 표현식 및 선언에 대한 오류 보고를 활성화합니다. - Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* 타입 검사 시 'null' 및 'undefined'를 고려합니다. - When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* 함수를 할당할 때 매개변수와 반환 값이 하위 타입 호환성을 보장하도록 검사합니다. - When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* 'bind', 'call' 및 'apply' 메서드의 인수가 원래 함수와 일치하는지 확인합니다. - Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* 선언되었지만 생성자에서 설정되지 않은 클래스 속성을 검사합니다. - Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* 'this'에 'any' 타입이 주어졌을 때 오류 보고를 활성화합니다. - Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* catch 절 변수의 기본값을 'any' 대신 'unknown'으로 설정합니다. - Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* 'use strict'가 항상 출력되도록 보장합니다. - Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* 읽지 않은 로컬 변수에 대한 오류 보고를 활성화합니다. - Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* 함수 매개변수가 읽히지 않을 때 오류를 발생시킵니다. - Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* 선택적 속성 유형을 'undefined'를 추가하지 않고 작성된 대로 해석합니다. - Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* 함수에서 명시적으로 반환되지 않는 코드 경로에 대한 오류 보고를 활성화합니다. - Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* switch 문에서 폴스루 케이스에 대한 오류 보고를 활성화합니다. - Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* 인덱스를 사용하여 액세스할 때 타입에 'undefined'를 추가합니다. - Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* 파생 클래스의 재정의 멤버가 override 수정자로 표시되도록 보장합니다. - Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* 인덱스형을 사용하여 선언된 키에 인덱싱된 접근자를 사용하도록 강제합니다. - Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* 사용하지 않는 레이블에 대한 오류 보고를 비활성화합니다. - Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* 도달할 수 없는 코드에 대한 오류 보고를 비활성화합니다. - Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* TypeScript에 포함된 .d.ts 파일의 타입 검사를 건너뜁니다. - Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* 모든 .d.ts 파일의 타입 검사를 건너뜁니다. - Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}
